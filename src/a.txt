import numpy as np
from scipy.spatial.distance import pdist, squareform
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from Bio.PDB import PDBParser
import os
import matplotlib.ticker as ticker


def validate_matrices(distance_map, adjacency_matrix, normalized_adjacency):
    """验证生成的矩阵是否正确"""
    print("\n矩阵验证结果:")
    print("-" * 50)

    # 1. 检查距离图
    print("\n距离图验证:")
    print(f"形状: {distance_map.shape}")
    print(f"对角线元素是否为零: {np.allclose(np.diag(distance_map), 0)}")
    print(f"矩阵是否对称: {np.allclose(distance_map, distance_map.T)}")
    print(f"距离范围: [{np.min(distance_map):.2f}, {np.max(distance_map):.2f}] Å")

    # 2. 检查邻接矩阵
    print("\n邻接矩阵验证:")
    print(f"形状: {adjacency_matrix.shape}")
    print(f"对角线元素是否为1: {np.allclose(np.diag(adjacency_matrix), 1)}")
    print(f"矩阵是否对称: {np.allclose(adjacency_matrix, adjacency_matrix.T)}")
    print(f"值范围: [{np.min(adjacency_matrix):.2f}, {np.max(adjacency_matrix):.2f}]")

    # 3. 检查归一化邻接矩阵
    print("\n归一化邻接矩阵验证:")
    print(f"形状: {normalized_adjacency.shape}")
    print(f"矩阵是否对称: {np.allclose(normalized_adjacency, normalized_adjacency.T)}")
    print(
        f"值范围: [{np.min(normalized_adjacency):.2f}, {np.max(normalized_adjacency):.2f}]"
    )

    # 4. 检查矩阵之间的关系
    print("\n矩阵关系验证:")
    # 检查距离和邻接值是否呈负相关
    # 将矩阵展平并移除对角线元素
    mask = ~np.eye(distance_map.shape[0], dtype=bool)
    distances_flat = distance_map[mask]
    adjacency_flat = adjacency_matrix[mask]
    correlation = np.corrcoef(distances_flat, adjacency_flat)[0, 1]
    print(f"距离-邻接相关性: {correlation:.3f} (应为负值)")


def extract_ca_coordinates_from_pdb(pdb_file):
    """从PDB文件中提取Cα原子的坐标"""
    parser = PDBParser(QUIET=True)
    structure = parser.get_structure("protein", pdb_file)

    # 提取第一个模型
    model = structure[0]

    ca_coords = []
    residue_ids = []

    # 遍历所有残基
    for chain in model:
        for residue in chain:
            # 检查是否含有Cα原子
            if "CA" in residue:
                ca_atom = residue["CA"]
                ca_coords.append(ca_atom.get_coord())
                residue_ids.append((chain.id, residue.id[1]))

    return np.array(ca_coords), residue_ids


def create_adjacency_matrix(ca_coords, d0=4.0):
    """
    根据论文中的公式，从Cα坐标计算GCN的邻接矩阵
    S_ij = 2/(1 + max(d0, d_ij)/d0)
    """
    # 计算所有残基之间的欧氏距离
    distance_map = squareform(pdist(ca_coords, "euclidean"))

    # 创建邻接矩阵
    n_residues = len(ca_coords)
    adjacency_matrix = np.zeros((n_residues, n_residues))

    # 根据论文中的公式计算邻接矩阵
    for i in range(n_residues):
        for j in range(n_residues):
            dij = distance_map[i, j]
            max_val = max(d0, dij)
            adjacency_matrix[i, j] = 2 / (1 + max_val / d0)

    return adjacency_matrix, distance_map


def normalize_adjacency_matrix(adjacency_matrix):
    """对邻接矩阵进行归一化，用于GCN：A = D^(-1/2) * A * D^(-1/2)"""
    # 计算度矩阵
    degree_matrix = np.sum(adjacency_matrix, axis=1)

    # 计算D^(-1/2)
    degree_matrix_inv_sqrt = np.diag(np.power(degree_matrix, -0.5))

    # 计算归一化邻接矩阵
    normalized_adjacency = np.matmul(
        np.matmul(degree_matrix_inv_sqrt, adjacency_matrix), degree_matrix_inv_sqrt
    )

    return normalized_adjacency


def visualize_matrix(
    matrix, title, output_file=None, colorbar_label="", matrix_type="distance"
):
    """将矩阵可视化为热图"""
    plt.figure(figsize=(10, 8))

    if matrix_type == "distance":
        # 创建掩码，只标记对角线元素（距离为0的元素）
        mask = np.eye(matrix.shape[0], dtype=bool)
        # 复制矩阵以避免修改原始数据
        masked_matrix = matrix.copy()
        # 只将对角线元素（距离为0）设置为NaN
        masked_matrix[mask] = np.nan

        # 设置最小值为矩阵中最小的非零距离
        min_val = np.min(matrix[~mask])  # 排除对角线上的0值
        max_val = np.max(matrix)

        # 创建对数标准化器
        norm = LogNorm(vmin=min_val, vmax=max_val)

        # 距离图：使用'viridis'颜色映射和对数尺度
        im = plt.imshow(
            masked_matrix, cmap="viridis", interpolation="nearest", norm=norm
        )

        # 添加colorbar
        cbar = plt.colorbar(im, label=colorbar_label)
        # 生成对数均匀分布的刻度值
        ticks = np.logspace(np.log10(min_val), np.log10(max_val), num=10)
        cbar.set_ticks(ticks)
        # 格式化刻度标签，保留一位小数
        cbar.set_ticklabels([f"{tick:.1f}" for tick in ticks])
    elif matrix_type == "adjacency":
        # 邻接矩阵：使用'hot'颜色映射和线性尺度
        plt.imshow(matrix, cmap="hot", interpolation="nearest", vmin=0, vmax=2)
        plt.colorbar(label=colorbar_label)
    else:  # normalized adjacency
        # 归一化邻接矩阵：使用'coolwarm'颜色映射和对称尺度
        max_val = np.max(np.abs(matrix))
        plt.imshow(
            matrix,
            cmap="coolwarm",
            interpolation="nearest",
            vmin=-max_val,
            vmax=max_val,
        )
        plt.colorbar(label=colorbar_label)

    plt.title(title)
    plt.xlabel("Residue Index")
    plt.ylabel("Residue Index")
    plt.tight_layout()

    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches="tight")
    else:
        plt.show()
    plt.close()


def process_protein_structure(pdb_file, output_dir="./output", d0=4.0):
    """
    处理蛋白质结构文件，生成GCN的邻接矩阵

    参数:
    -----------
    pdb_file : str
        PDB文件路径
    output_dir : str
        结果保存目录
    d0 : float
        距离阈值，默认为4.0埃

    返回:
    --------
    normalized_adjacency : numpy.ndarray
        归一化后的邻接矩阵，用于GCN
    """
    # 创建输出目录
    os.makedirs(output_dir, exist_ok=True)

    # 提取蛋白质名称
    protein_name = os.path.basename(pdb_file).split(".")[0]

    # 1. 提取Cα原子坐标
    ca_coords, residue_ids = extract_ca_coordinates_from_pdb(pdb_file)
    print(f"成功提取 {len(ca_coords)} 个残基的Cα坐标")

    # 2. 创建邻接矩阵和距离图
    adjacency_matrix, distance_map = create_adjacency_matrix(ca_coords, d0)
    print(f"成功创建邻接矩阵，形状: {adjacency_matrix.shape}")

    # 3. 归一化邻接矩阵
    normalized_adjacency = normalize_adjacency_matrix(adjacency_matrix)
    print(f"成功归一化邻接矩阵")

    # 4. 可视化并保存结果
    # 可视化距离图
    visualize_matrix(
        distance_map,
        title=f"Distance Map - Protein {protein_name}",
        output_file=f"{output_dir}/{protein_name}_distance_map.png",
        colorbar_label="Distance (Å)",
        matrix_type="distance",
    )

    # 可视化邻接矩阵
    visualize_matrix(
        adjacency_matrix,
        title=f"Adjacency Matrix - Protein {protein_name}",
        output_file=f"{output_dir}/{protein_name}_adjacency.png",
        colorbar_label="Connection Strength",
        matrix_type="adjacency",
    )

    # 可视化归一化邻接矩阵
    visualize_matrix(
        normalized_adjacency,
        title=f"Normalized Adjacency Matrix - Protein {protein_name}",
        output_file=f"{output_dir}/{protein_name}_normalized_adjacency.png",
        colorbar_label="Normalized Connection Strength",
        matrix_type="normalized",
    )

    # 保存结果为NumPy数组
    np.save(f"{output_dir}/{protein_name}_distance_map.npy", distance_map)
    np.save(f"{output_dir}/{protein_name}_adjacency.npy", adjacency_matrix)
    np.save(
        f"{output_dir}/{protein_name}_normalized_adjacency.npy", normalized_adjacency
    )

    print(f"已保存所有结果到 {output_dir} 目录")

    # 验证矩阵
    validate_matrices(distance_map, adjacency_matrix, normalized_adjacency)

    return normalized_adjacency, distance_map, ca_coords, residue_ids


# 使用示例
if __name__ == "__main__":
    # PDB文件路径
    pdb_dir = "/home/sunstreamy/code/project/AI/protein-solubility-reproduction/paperAbout/dataset/pdb"
    pdb_file = os.path.join(pdb_dir, "4503895.pdb")  # 使用其中一个PDB文件

    # 处理蛋白质结构
    normalized_adjacency, distance_map, ca_coords, residue_ids = (
        process_protein_structure(pdb_file)
    )

    print(f"处理完成: {os.path.basename(pdb_file)}")
    print(f"蛋白质包含 {len(ca_coords)} 个残基")
    print(f"邻接矩阵形状: {normalized_adjacency.shape}")
